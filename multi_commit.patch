From b39dbf90a98abe89ccf756358f79abecae8146c3 Mon Sep 17 00:00:00 2001
From: Alejandro Lopez <alejandrolopez1592@gmail.com>
Date: Mon, 11 Dec 2023 14:12:26 -0700
Subject: [PATCH 1/2] Feat: pass showGraph into intergface, configure initial
 showGraph state to false and update getDataFromServer to continuously call
 server

---
 datafeed/requirements.txt |  2 +-
 src/App.tsx               | 28 ++++++++++++++++++++++------
 2 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/datafeed/requirements.txt b/datafeed/requirements.txt
index f678e82..4c1c65f 100644
--- a/datafeed/requirements.txt
+++ b/datafeed/requirements.txt
@@ -1 +1 @@
-python-dateutil==2.8.2
\ No newline at end of file
+python-dateutil==2.8.2`
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..6b73592 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,33 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
+  /**
+   * continuously contact the server to get data that updates state every 100 milliseconds
+   * clear the interval and reset data once interval has looped 1000+ times
+   */
 
   /**
    * Render the App react component
-- 
2.42.0


From c3df6ae195e5b266f926f3f43a355a9a6e4dd317 Mon Sep 17 00:00:00 2001
From: Alejandro Lopez <alejandrolopez1592@gmail.com>
Date: Mon, 11 Dec 2023 14:15:04 -0700
Subject: [PATCH 2/2] Feat: Update PerspectiveViewerElement to behave as
 HTMLElement and update table to y_line with associated attributes

---
 src/Graph.tsx | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..b9b004c 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',`
+      {"stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.42.0

